#!/usr/bin/env python

import argparse
import os
import sys

from pysosutils.utilities.plugin import Plugin
from pysosutils.utilities.sostests import SosChecker
from distutils.sysconfig import get_python_lib

parser = argparse.ArgumentParser(description="Pysos is used to quickly parse and display information from a\
                sosreport in a meaningful and human-readable manner")
parser.add_argument('target', nargs='*', default='./',
                    help="sosreport root, defaults to ./")
parser.add_argument('-a', "--getall", action="store_true",
                    help="Print all information (RHEV excluded)")
parser.add_argument('-b', "--bios", action="store_true",
                    help="Print BIOS and dmidecode information")
parser.add_argument('-c', "--containers", action="store_true",
                    help="Print container related information")
parser.add_argument('--cpu', action="store_true",
                    help="Print CPU information")
parser.add_argument('-d', "--lvm", action="store_true",
                    help='Print disk and LVM information')
parser.add_argument('--docker', action="store_true",
                    help="Printer docker and container related information")
parser.add_argument('-e', '--ethtool', action="store_true",
                    help="Print ethtool information")
parser.add_argument('-f', "--filesystem", action="store_true",
                    help="Print filesystem information")
parser.add_argument("--fso", action="store_true",
                    help="Print filesystem information AND mount options")
parser.add_argument('-g', "--bonding", action="store_true",
                    help="Print bonding information")
parser.add_argument('-i', "--ip", action="store_true",
                    help="Print IP information")
parser.add_argument('-k', "--kernel", action="store_true",
                    help="Print kdump and kernel information")
parser.add_argument('-l', "--lspci", action="store_true",
                    help="Print lspci information")
parser.add_argument('-m', "--memory", action="store_true",
                    help="Print memory information")
parser.add_argument('-n', "--netdev", action="store_true",
                    help='Print proc/net/dev information')
parser.add_argument("--net", action="store_true",
                    help="Alias for --ethtool, --bonding, --ip, --network")
parser.add_argument('-o', "--opsys", action="store_true",
                    help="Print OS information")
parser.add_argument('-p', "--processes", action="store_true",
                    help="Print process information")
parser.add_argument('-s', "--sysctl", action="store_true",
                    help="Print common sysctl settings")
parser.add_argument('-t', "--tests", action="store_true", help="Run plugin tests")
parser.add_argument('-v', "--virt", action="store_true",
                    help="Print virtualization information")
parser.add_argument("--db", action="store_true",
                    help="Print RHEV DB information, must be run with -v")
parser.add_argument("--vnet", action="store_true",
                    help="Also display vnet interfaces in network output")
parser.add_argument("--verbose", action="store_true",
                    help="Enable verbose output. Prints passed test info.")
#parser.add_argument('-y', "--yum", action="store_true",
#                    help='Print yum/RHN information')




if __name__ == '__main__':
    args = vars(parser.parse_args())
    args['target'] = args['target'][0]
    if not args['target'].endswith('/'):
        args['target'] += '/'
    if args['getall'] == True:
        for arg in args:
            if arg == 'target' or arg == 'verbose' or arg == 'tests':
                continue
            args[arg] = True
    if args['net']:
        args['netdev'] = True
        args['ethtool'] = True
        args['bonding'] = True
        args['ip'] = True
    if any([args['netdev'], args['ethtool'], args['bonding'], args['ip']]):
        args['network'] = True

    # Get all plugin modules
    if 'pysosutils' not in os.listdir(os.getcwd()):
        p = get_python_lib()
        path = p + '/pysosutils/plugins/'
    else:
        path = 'pysosutils/plugins'
    plugins = {}
    sys.path.insert(0, path)
    for f in sorted(os.listdir(path)):
        fname, ext = os.path.splitext(f)
        if ext == '.py':
            mod = __import__(fname)
            class_ = getattr(mod, fname)
            plugins[fname] = class_(args['target'], args)
    sys.path.pop(0)

    # For every module specified on the cli, run its parse() method.
    for plug in plugins:
        if plug in args.keys() and args[plug]:
            try:
                plugins[plug].parse()
            except Exception as e:
                print e
                plugins[plug].parse_failed = True
            #if args['tests'] and hasattr(plugins[plug], 'tests'):
            #    plugins[plug].runtests(args['verbose'])
    if args['tests']:
        t = SosChecker(args['target'], args)
        t.run_all_tests()
